name: ECS Deploy

on:
  workflow_call:
    inputs:
      aws_region:
        required: false
        type: string
        description: AWS Region
        default: ap-southeast-1
      cluster_name:
        required: true
        type: string
        description: ECS cluster name that service runs in
      codedeploy-application:
        required: false
        type: string
        description: "The name of the AWS CodeDeploy application, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'AppECS-{cluster}-{service}'."
      codedeploy-deployment-group:
        required: false
        type: string
        description: "The name of the AWS CodeDeploy deployment group, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'DgpECS-{cluster}-{service}'."
      codedeploy-appspec:
        required: false
        type: string
        description: "The path to the AWS CodeDeploy AppSpec file, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'appspec.yaml'."
      container_name:
        required: true
        type: string
        description: Container name for deploying image
      environment-variables:
        required: false
        type: string
        description: 'Variables to add to the container. Each variable is of the form KEY=value, you can specify multiple variables with multi-line YAML strings.'
      image_uri:
        required: true
        type: string
        description: Full image URI
      inspect_taskdef_post_render:
        required: false
        type: boolean
        description: Prints out the task definition to stdout
        default: false
      role_to_assume:
        required: true
        type: string
        description: AWS IAM role to assume to perform ECS deployment
      service_name:
        required: true
        type: string
        description: ECS service name to run the image
      taskdef_path:
        required: false
        type: string
        description: Relative path to the ECS task definition
      taskdef_arn:
        required: false
        type: string
        description: ARN of the ECS task definition
      taskdef_family:
        required: false
        type: string
        description: Family name of the ECS task definition
      wait_for_service_stability:
        required: false
        type: boolean
        description: Whether to wait for ECS deployment to complete
        default: true
    outputs:
      task-definition:
        description: The rendered task definition
        value: ${{ jobs.ecs-deploy.outputs.task-definition }}

jobs:
  ecs-deploy:
    runs-on: ubuntu-latest
    outputs:
      task-definition: ${{ steps.render-task-def.outputs.task-definition }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Assume IAM role
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.role_to_assume }}

      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          container-name: ${{ inputs.container_name }}
          environment-variables: ${{ inputs.environment-variables }}
          image: ${{ inputs.image_uri }}
          task-definition: ${{ inputs.taskdef_path }}
          task-definition-arn: ${{ inputs.taskdef_arn }}
          task-definition-family: ${{ inputs.taskdef_family }}

      - name: Inspect task definition
        if: ${{ inputs.inspect_taskdef_post_render }}
        shell: bash
        run: cat ${{ steps.render-task-def.outputs.task-definition }}

      - name: Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster: ${{ inputs.cluster_name }}
          codedeploy-application: ${{ inputs.codedeploy-application }}
          codedeploy-appspec: ${{ inputs.codedeploy-appspec }}
          codedeploy-deployment-group: ${{ inputs.codedeploy-deployment-group }}
          service: ${{ inputs.service_name }}
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: ${{ inputs.wait_for_service_stability }}